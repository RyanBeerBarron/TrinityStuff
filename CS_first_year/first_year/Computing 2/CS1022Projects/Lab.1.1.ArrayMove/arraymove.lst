


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Undef, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E3A04191        LDR              r4, =0x40000024 ; 0x40000024 is
                                                             mapped to 0x000000
                                                            24
    7 00000004 E59F507C        LDR              r5, =UndefHandler ; Address of 
                                                            new undefined handl
                                                            er
    8 00000008 E5845000        STR              r5, [r4]    ; Store new undef h
                                                            andler address
    9 0000000C         
   10 0000000C         ;
   11 0000000C         ; Test our new instruction
   12 0000000C         ;
   13 0000000C E3A04003        LDR              r4, =3      ; test 3^4
   14 00000010 E3A05004        LDR              r5, =4      ;
   15 00000014         
   16 00000014         ; This is our undefinied unstruction opcode
   17 00000014 77F150F4        DCD              0x77F150F4  ; POW r0, r4, r5 (r
                                                            0 = r4 ^ r5)
   18 00000018         
   19 00000018         ; R0 should be 81
   20 00000018         
   21 00000018 EAFFFFFE 
                       stop    B                stop
   22 0000001C         
   23 0000001C         
   24 0000001C         ;
   25 0000001C         ; Undefined exception handler
   26 0000001C         ;
   27 0000001C         UndefHandler
   28 0000001C E92D5FFF        STMFD            sp!, {r0-r12, LR} 
                                                            ; save registers
   29 00000020         
   30 00000020 E51E4004        LDR              r4, [lr, #-4] ; load undefinied
                                                             instruction
   31 00000024 E204580F        BIC              r5, r4, #0xFFF0FFFF ; clear all
                                                             but opcode bits
   32 00000028 E3350801        TEQ              r5, #0x00010000 ; check for und
                                                            efined opcode 0x1
   33 0000002C 1A000008        BNE              endif1      ; if (power instruc
                                                            tion) {
   34 00000030         
   35 00000030 E204500F        BIC              r5, r4, #0xFFFFFFF0 ;  isolate 
                                                            Rm register number
   36 00000034 E2046A0F        BIC              r6, r4, #0xFFFF0FFF ;  isolate 
                                                            Rn register number
   37 00000038 E1A06626        MOV              r6, r6, LSR #12 ;
   38 0000003C E2047C0F        BIC              r7, r4, #0xFFFFF0FF ;  isolate 
                                                            Rd register number
   39 00000040 E1A07427        MOV              r7, r7, LSR #8 ;
   40 00000044         
   41 00000044 E79D1105        LDR              r1, [sp, r5, LSL #2] ;  grab sa
                                                            ved Rm off stack
   42 00000048 E79D2106        LDR              r2, [sp, r6, LSL #2] ;  grab sa
                                                            ved Rn off stack



ARM Macro Assembler    Page 2 


   43 0000004C         
   44 0000004C EB000001        BL               power       ;  call pow subrout
                                                            ine
   45 00000050         
   46 00000050 E78D0107        STR              r0, [sp, r7, LSL #2] ;  save re
                                                            sult over saved Rd 
                                                             
   47 00000054         endif1                               ; }
   48 00000054 E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
   49 00000058         
   50 00000058         
   51 00000058         ; power subroutine
   52 00000058         ; Computes x^y
   53 00000058         ; paramaters: r0: result (variable)
   54 00000058         ;             r1: x (value)
   55 00000058         ;             r2: y (value)
   56 00000058         power
   57 00000058 E92D4006        STMFD            sp!, {r1-r2,lr} 
                                                            ; save registers
   58 0000005C         
   59 0000005C E3520000        CMP              r2, #0      ; if (y = 0)
   60 00000060 1A000001        BNE              else2       ; {
   61 00000064 E3A00001        MOV              r0, #1      ;  result = 1
   62 00000068 EA000005        B                endif2      ; }
   63 0000006C         else2                                ; else {
   64 0000006C E1A00001        MOV              r0, r1      ;  result = x
   65 00000070 E2522001        SUBS             r2, r2, #1  ;  y = y - 1
   66 00000074 0A000002        BEQ              endif3      ;  if (y != 0) {
   67 00000078         do4                                  ;   do {
   68 00000078 E0000091        MUL              r0, r1, r0  ;    result = resul
                                                            t * x
   69 0000007C E2522001        SUBS             r2, r2, #1  ;    y = y - 1
   70 00000080 1AFFFFFC        BNE              do4         ;   } while (y != 0
                                                            )
   71 00000084         endif3                               ;  }
   72 00000084         endif2                               ; } 
   73 00000084 E8BD8006        LDMFD            sp!, {r1-r2, pc} ; restore regi
                                                            sters and return
   74 00000088         
   75 00000088         
   76 00000088                 END
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=.\arraymove.d -o.\arraym
ove.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\Phil
ips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO
_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\array
move.lst ArrayMove.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Undef 00000000

Symbol: Undef
   Definitions
      At line 1 in file ArrayMove.s
   Uses
      None
Comment: Undef unused
UndefHandler 0000001C

Symbol: UndefHandler
   Definitions
      At line 27 in file ArrayMove.s
   Uses
      At line 7 in file ArrayMove.s
Comment: UndefHandler used once
do4 00000078

Symbol: do4
   Definitions
      At line 67 in file ArrayMove.s
   Uses
      At line 70 in file ArrayMove.s
Comment: do4 used once
else2 0000006C

Symbol: else2
   Definitions
      At line 63 in file ArrayMove.s
   Uses
      At line 60 in file ArrayMove.s
Comment: else2 used once
endif1 00000054

Symbol: endif1
   Definitions
      At line 47 in file ArrayMove.s
   Uses
      At line 33 in file ArrayMove.s
Comment: endif1 used once
endif2 00000084

Symbol: endif2
   Definitions
      At line 72 in file ArrayMove.s
   Uses
      At line 62 in file ArrayMove.s
Comment: endif2 used once
endif3 00000084

Symbol: endif3
   Definitions
      At line 71 in file ArrayMove.s
   Uses
      At line 66 in file ArrayMove.s
Comment: endif3 used once
power 00000058

Symbol: power



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 56 in file ArrayMove.s
   Uses
      At line 44 in file ArrayMove.s
Comment: power used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file ArrayMove.s
   Uses
      At line 3 in file ArrayMove.s
Comment: start used once
stop 00000018

Symbol: stop
   Definitions
      At line 21 in file ArrayMove.s
   Uses
      At line 21 in file ArrayMove.s
Comment: stop used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file ArrayMove.s
   Uses
      None
Comment: main unused
1 symbol
350 symbols in table
