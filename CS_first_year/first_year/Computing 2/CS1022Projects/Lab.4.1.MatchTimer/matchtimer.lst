


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MatchTimer, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         ;
    6 00000000         ; Memory-mapped device registers
    7 00000000         ;
    8 00000000 FFFFF00C 
                       VICIntSelect
                               EQU              0xFFFFF00C
    9 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
   10 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
   11 00000000         
   12 00000000 FFFFF200 
                       VICVectPri0
                               EQU              0xFFFFF200
   13 00000000 FFFFFF00 
                       VICVectAddr
                               EQU              0xFFFFFF00
   14 00000000         
   15 00000000 E002C004 
                       PINSEL1 EQU              0xE002C004
   16 00000000         
   17 00000000 E002C010 
                       PINSEL4 EQU              0xE002C010
   18 00000000 E01FC140 
                       EXTINT  EQU              0xE01FC140
   19 00000000 E01FC148 
                       EXTMODE EQU              0xE01FC148
   20 00000000 E01FC14C 
                       EXTPOLAR
                               EQU              0xE01FC14C
   21 00000000         
   22 00000000 E0004004 
                       T0TCR   EQU              0xE0004004
   23 00000000 E0004070 
                       T0CTCR  EQU              0xE0004070
   24 00000000 E0004018 
                       T0MR0   EQU              0xE0004018
   25 00000000 E0004014 
                       T0MCR   EQU              0xE0004014
   26 00000000 E000400C 
                       T0PR    EQU              0xE000400C
   27 00000000 E0004000 
                       T0IR    EQU              0xE0004000
   28 00000000         
   29 00000000 E0008004 
                       T1TCR   EQU              0xE0008004
   30 00000000 E0008070 
                       T1CTCR  EQU              0xE0008070
   31 00000000 E0008018 
                       T1MR0   EQU              0xE0008018
   32 00000000 E000801C 
                       T1MR1   EQU              0xE000801C
   33 00000000 E0008014 



ARM Macro Assembler    Page 2 


                       T1MCR   EQU              0xE0008014
   34 00000000 E000800C 
                       T1PR    EQU              0xE000800C
   35 00000000 E0008000 
                       T1IR    EQU              0xE0008000
   36 00000000         
   37 00000000 E006C000 
                       DACR    EQU              0xE006C000
   38 00000000         
   39 00000000         
   40 00000000         ;
   41 00000000         ; A value between 0 and 1023 representing the volume
   42 00000000         ;
   43 00000000 000003FF 
                       volume  EQU              1023
   44 00000000         
   45 00000000         
   46 00000000         start
   47 00000000         
   48 00000000         ;
   49 00000000         ; Configure P2.10 for EINT0 functionality
   50 00000000         ; (i.e. a rising/falling edge on P2.10 will
   51 00000000         ; raise an interrupt (EINT0 interrupt)
   52 00000000         ;
   53 00000000         
   54 00000000         
   55 00000000 E3A00000        MOV              R0, #0
   56 00000004 E59F12F8        LDR              R1,=count
   57 00000008 E5810000        STR              R0,[R1]
   58 0000000C         
   59 0000000C         ; Enable P2.10 for EINT0
   60 0000000C E59F52F4        LDR              R5, =PINSEL4
   61 00000010 E5956000        LDR              R6, [R5]
   62 00000014 E3C66603        BIC              R6, #(0x03 << 20)
   63 00000018 E3866601        ORR              R6, #(0x01 << 20)
   64 0000001C E5856000        STR              R6, [R5]
   65 00000020         
   66 00000020         ; Set edge-sensitive mode for EINT0 (rather than level s
                       ensitive)
   67 00000020 E59F52E4        LDR              R5, =EXTMODE
   68 00000024 E5956000        LDR              R6, [R5]
   69 00000028 E3866001        ORR              R6, #1
   70 0000002C E5C56000        STRB             R6, [R5]
   71 00000030         
   72 00000030         ; Set rising-edge mode for EINT0
   73 00000030         ; (initially rising-edge sensitivity to detect button do
                       wn)
   74 00000030 E59F52D8        LDR              R5, =EXTPOLAR
   75 00000034 E5956000        LDR              R6, [R5]
   76 00000038 E3C66001        BIC              R6, #1
   77 0000003C E5C56000        STRB             R6, [R5]
   78 00000040         
   79 00000040         ; Reset EINT0
   80 00000040 E59F52CC        LDR              R5, =EXTINT
   81 00000044 E3A06001        MOV              R6, #1
   82 00000048 E5C56000        STRB             R6, [R5]
   83 0000004C         
   84 0000004C         
   85 0000004C         ;



ARM Macro Assembler    Page 3 


   86 0000004C         ; Configure TIMER1 for 1 second interrupts
   87 0000004C         ;
   88 0000004C         
   89 0000004C         ; Stop and reset TIMER0 using Timer Control Register
   90 0000004C         ; Set bit 0 of TCR to 0 to diasble TIMER
   91 0000004C         ; Set bit 1 of TCR to 1 to reset TIMER
   92 0000004C E59F52C4        LDR              R5, =T1TCR
   93 00000050 E3A06002        LDR              R6, =0x2
   94 00000054 E5C56000        STRB             R6, [R5]
   95 00000058         
   96 00000058         ; Clear any previous TIMER0 interrupt by writing 0xFF to
                        the TIMER0
   97 00000058         ; Interrupt Register (T0IR)
   98 00000058 E59F52BC        LDR              R5, =T1IR
   99 0000005C E3A060FF        LDR              R6, =0xFF
  100 00000060 E5C56000        STRB             R6, [R5]
  101 00000064         
  102 00000064         ; Set timer mode using Count Timer Control Register
  103 00000064         ; Set bits 0 and 1 of CTCR to 00
  104 00000064         ; for timer mode
  105 00000064 E59F52B4        LDR              R5, =T1CTCR
  106 00000068 E3A06000        LDR              R6, =0x00
  107 0000006C E5C56000        STRB             R6, [R5]
  108 00000070         
  109 00000070         
  110 00000070         ; Set match register for 40 mins using match register
  111 00000070         ; (Set match register for 4 sec for testing)
  112 00000070         ; Assuming a 12Mhz clock
  113 00000070 E59F52AC        LDR              R5, =T1MR0
  114 00000074 E59F62AC        LDR              R6, =48000000
  115 00000078 E5856000        STR              R6, [R5]
  116 0000007C         
  117 0000007C         
  118 0000007C         
  119 0000007C         ; Interrupt and restart on match using Match Control Reg
                       ister
  120 0000007C         ; Set bit 0 of MCR to 1 to turn on interrupts
  121 0000007C         ; Set bit 1 of MCR to 1 to reset counter to 0 after ever
                       y match
  122 0000007C         ; Set bit 2 of MCR to 0 to leave the counter enabled aft
                       er match
  123 0000007C E59F52A8        LDR              R5, =T1MCR
  124 00000080 E3A06001        LDR              R6, =0x01
  125 00000084 E1C560B0        STRH             R6, [R5]
  126 00000088         
  127 00000088         ; Turn off prescaling using Prescale Register
  128 00000088         ; (prescaling is only needed to measure long intervals)
  129 00000088 E59F52A0        LDR              R5, =T1PR
  130 0000008C E3A06000        LDR              R6, =0
  131 00000090 E5856000        STR              R6, [R5]
  132 00000094         
  133 00000094         
  134 00000094         
  135 00000094         
  136 00000094         ;
  137 00000094         ; Configure VIC for pushbutton
  138 00000094         ;
  139 00000094         
  140 00000094         ; Just some useful values



ARM Macro Assembler    Page 4 


  141 00000094 E3A0300E        MOV              R3, #14     ; vector = 14; (EIN
                                                            T0 VIC vector)
  142 00000098 E3A04001        MOV              R4, #1      ; vmask = 1;
  143 0000009C E1A04314        MOV              R4, R4, LSL R3 ; vmask = vmask 
                                                            << vector;
  144 000000A0         
  145 000000A0         ; VICIntSelect - Set Vector 0x14 for IRQ (not FIQ) (clea
                       r bit 14)
  146 000000A0 E59F528C        LDR              R5, =VICIntSelect ; addr = VICI
                                                            ntSelect;
  147 000000A4 E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);  
  148 000000A8 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x14
  149 000000AC E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  150 000000B0         
  151 000000B0         ; Set Priority to lowest (15)
  152 000000B0 E59F5280        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  153 000000B4 E3A0600F        MOV              R6, #0xF    ; pri = 15;
  154 000000B8 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = pri;
  155 000000BC         
  156 000000BC         ; Set handler address
  157 000000BC E59F5278        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  158 000000C0 E59F6278        LDR              R6, =ButtonHandler ; handler = 
                                                            address of ButtonHa
                                                            ndler;
  159 000000C4 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  160 000000C8         
  161 000000C8         ; VICIntEnable
  162 000000C8 E59F5274        LDR              R5, =VICIntEnable ; addr = VICV
                                                            ectEnable;
  163 000000CC E5854000        STR              R4, [R5]    ; enable interrupts
                                                             for vector 0x14
  164 000000D0         
  165 000000D0         
  166 000000D0         ;
  167 000000D0         ; Configure TIMER0 to generate frequency for middle C
  168 000000D0         ;
  169 000000D0         
  170 000000D0         ; Stop and reset TIMER0
  171 000000D0 E59F5270        LDR              R5, =T0TCR
  172 000000D4 E3A06002        LDR              R6, =0x2
  173 000000D8 E5C56000        STRB             R6, [R5]
  174 000000DC         
  175 000000DC         ; Set timer mode
  176 000000DC E59F5268        LDR              R5, =T0CTCR
  177 000000E0 E3A06000        LDR              R6, =0x00
  178 000000E4 E5C56000        STRB             R6, [R5]
  179 000000E8         
  180 000000E8         ; Set match register for 1 sec
  181 000000E8 E59F5260        LDR              R5, =T0MR0
  182 000000EC E59F6260        LDR              R6, =22934  ;  12MHz / (261.626



ARM Macro Assembler    Page 5 


                                                            Hz * 2)
  183 000000F0 E5856000        STR              R6, [R5]
  184 000000F4         
  185 000000F4         
  186 000000F4         ; Configure to interrupt and restart on match
  187 000000F4 E59F525C        LDR              R5, =T0MCR
  188 000000F8 E3A06003        LDR              R6, =0x03
  189 000000FC E1C560B0        STRH             R6, [R5]
  190 00000100         
  191 00000100         ; Set prescale = 1 (no prescaling)
  192 00000100 E59F5254        LDR              R5, =T0PR
  193 00000104 E3A06000        LDR              R6, =0      ; Set to (wanted pr
                                                            escale - 1)
  194 00000108 E5856000        STR              R6, [R5]
  195 0000010C         
  196 0000010C         ; NOTE: We won't start TIMER0 until the button is presse
                       d down!!
  197 0000010C         ;       (See ButtonHandler)
  198 0000010C         
  199 0000010C         
  200 0000010C         ;
  201 0000010C         ; Configure VIC for TIMER0
  202 0000010C         ;
  203 0000010C         
  204 0000010C         ; Just some useful values
  205 0000010C E3A03004        LDR              R3, =4      ; vector 4
  206 00000110 E3A04001        LDR              R4, =1      ;
  207 00000114 E1A04314        MOV              R4, R4, LSL R3 ; vector mask
  208 00000118         
  209 00000118         ; VICIntSelect - Set Vector 0x04 for IRQ (clear bit 4)
  210 00000118 E59F5214        LDR              R5, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  211 0000011C E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);  
  212 00000120 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x04
  213 00000124 E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  214 00000128         
  215 00000128         ; Set Priority to lowest (15)
  216 00000128 E59F5208        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  217 0000012C E3A0600F        MOV              R6, #0xF    ; pri = 15;
  218 00000130 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4); = pri;
  219 00000134         
  220 00000134         ; Set handler address
  221 00000134 E59F5200        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  222 00000138 E59F6220        LDR              R6, =TimerBuzzHandler ; handler
                                                             = address of Timer
                                                            BuzzHandler;
  223 0000013C E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  224 00000140         
  225 00000140         ; VICIntEnable
  226 00000140 E59F51FC        LDR              R5, =VICIntEnable ; addr = VICI



ARM Macro Assembler    Page 6 


                                                            ntEnable;
  227 00000144 E5854000        STR              R4, [R5]    ; enable Timers for
                                                             vector 0x4
  228 00000148         
  229 00000148         
  230 00000148         
  231 00000148         ;
  232 00000148         ; Configure VIC for TIMER1 interrupts
  233 00000148         ;
  234 00000148         
  235 00000148         ; Useful VIC vector numbers and masks for following code
                       
  236 00000148 E3A03005        LDR              R3, =5      ; vector 5
  237 0000014C E3A04020        LDR              R4, =(1 << 5) ; bit mask for ve
                                                            ctor 5
  238 00000150         
  239 00000150         ; VICIntSelect - Clear bit 5 of VICIntSelect register to
                        cause
  240 00000150         ; channel 5 (TIMER1) to raise IRQs (not FIQs)
  241 00000150 E59F51DC        LDR              R5, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  242 00000154 E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);  
  243 00000158 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x05
  244 0000015C E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  245 00000160         
  246 00000160         ; Set Priority for VIC channel 5 (TIMER1) to lowest (15)
                        by setting
  247 00000160         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 4 of an
  248 00000160         ; array of 4-byte values that starts at VICVectPri0.
  249 00000160         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  250 00000160 E59F51D0        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  251 00000164 E3A0600F        MOV              R6, #15     ; pri = 15;
  252 00000168 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4); = pri;
  253 0000016C         
  254 0000016C         ; Set Handler routine address for VIC channel 5 (TIMER1)
                        to address of
  255 0000016C         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element
  256 0000016C         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  257 0000016C         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  258 0000016C E59F51C8        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr1;
  259 00000170 E59F61EC        LDR              R6, =TimerHandler ; handler = a
                                                            ddress of TimerHand
                                                            ler;
  260 00000174 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  261 00000178         
  262 00000178         
  263 00000178         ; Enable VIC channel 5 (TIMER0) by writing a 1 to bit 5 



ARM Macro Assembler    Page 7 


                       of VICIntEnable
  264 00000178 E59F51C4        LDR              R5, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  265 0000017C E5854000        STR              R4, [R5]    ; enable Timers for
                                                             vector 0x5
  266 00000180         
  267 00000180         
  268 00000180         
  269 00000180         ;
  270 00000180         ; Configure DAC (Digital to Audio Converter)
  271 00000180         ;
  272 00000180         
  273 00000180         ; Configure pin P0.26 for AOUT (DAC analog out)
  274 00000180 E59F51E0        LDR              R5, =PINSEL1
  275 00000184 E5956000        LDR              R6, [R5]
  276 00000188 E3C66603        BIC              R6, R6, #(0x03 << 20)
  277 0000018C E3866602        ORR              R6, R6, #(0x02 << 20)
  278 00000190 E5856000        STR              R6, [R5]
  279 00000194         
  280 00000194         ; DAC is always on so no further configuration required
  281 00000194         
  282 00000194         
  283 00000194         ;
  284 00000194         ; Infinite loop
  285 00000194         ;
  286 00000194 E59FB168        LDR              R11,=count
  287 00000198 E3A0A000        MOV              R10, #0
  288 0000019C E58BA000        STR              R10, [R11]
  289 000001A0 E59FB1C4        LDR              R11,=delay
  290 000001A4 E58BA000        STR              R10, [R11]
  291 000001A8         
  292 000001A8 EAFFFFFE 
                       stop    B                stop
  293 000001AC         
  294 000001AC         
  295 000001AC         TimerHandler
  296 000001AC E24EE004        SUB              LR, LR, #4
  297 000001B0 E92D5FFF        STMFD            sp!, {r0-r12, LR}
  298 000001B4 E59F5160        LDR              R5, =T1IR
  299 000001B8 E3A060FF        MOV              R6, #0xFF
  300 000001BC E5C56000        STRB             R6, [R5]    ; Reset TIMER1 inte
                                                            rrupt by writing 0x
                                                            FF to T1IR
  301 000001C0 E59F5150        LDR              R5, =T1TCR
  302 000001C4 E3A06002        LDR              R6, =0x2
  303 000001C8 E5C56000        STRB             R6, [R5]
  304 000001CC E59F5150        LDR              R5, =T1MR0
  305 000001D0 E59F619C        LDR              R6, =24000000 ; 2 second buzzer
                                                            
  306 000001D4 E5856000        STR              R6, [R5]
  307 000001D8 E59F5168        LDR              R5, =T0TCR
  308 000001DC E5956000        LDR              R6, [R5]
  309 000001E0 E3A05001        LDR              R5, =0x01
  310 000001E4 E1550006        CMP              R5, R6
  311 000001E8 0A000006        BEQ              noBuzz
  312 000001EC         
  313 000001EC         ;
  314 000001EC         ; Start TIMER0 (starts sound)
  315 000001EC         ;



ARM Macro Assembler    Page 8 


  316 000001EC         
  317 000001EC E59F5154        LDR              R5, =T0TCR
  318 000001F0 E3A06001        LDR              R6, =0x01
  319 000001F4 E5C56000        STRB             R6, [R5]
  320 000001F8         
  321 000001F8 E59FA104        LDR              R10, =count
  322 000001FC E3A0B001        LDR              R11, =1
  323 00000200 E58AB000        STR              R11, [R10]
  324 00000204         
  325 00000204 EA000006        B                dobuzz
  326 00000208         
  327 00000208         noBuzz
  328 00000208         
  329 00000208         ;;
  330 00000208         ;; Stop TIMER0 (stops sound)
  331 00000208         ;;
  332 00000208         
  333 00000208 E59F5138        LDR              R5, =T0TCR
  334 0000020C E3A06000        LDR              R6, =0x0
  335 00000210 E5C56000        STRB             R6, [R5]
  336 00000214         
  337 00000214         ;Stop timer
  338 00000214 E59F50FC        LDR              R5, =T1TCR
  339 00000218 E3A06000        LDR              R6, =0x0
  340 0000021C E5C56000        STRB             R6, [R5]
  341 00000220 EA000002        B                endTimerHandler
  342 00000224         dobuzz
  343 00000224         
  344 00000224 E59F50EC        LDR              R5, =T1TCR
  345 00000228 E3A06001        LDR              R6, =0x01
  346 0000022C E5C56000        STRB             R6, [R5]
  347 00000230         
  348 00000230         endTimerHandler
  349 00000230         ; Clear source of interrupt by writing 0 to VICVectAddr
  350 00000230 E59F5144        LDR              R5, =VICVectAddr
  351 00000234 E3A06000        MOV              R6, #0
  352 00000238 E5856000        STR              R6, [R5]
  353 0000023C         
  354 0000023C         ; Return
  355 0000023C E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR 
  356 00000240         
  357 00000240         
  358 00000240         
  359 00000240         
  360 00000240         
  361 00000240         ;
  362 00000240         ;  Button Handler
  363 00000240         ;
  364 00000240         ButtonHandler
  365 00000240         
  366 00000240 E24EE004        SUB              LR, LR, #4  ; Adjust return add
                                                            ress
  367 00000244 E92D5FFF        STMFD            sp!, {r0-r12, LR} 
                                                            ; save registers
  368 00000248         
  369 00000248         
  370 00000248         
  371 00000248         ;



ARM Macro Assembler    Page 9 


  372 00000248         ; Reset EINT0
  373 00000248         ;
  374 00000248 E59F50C4        LDR              R5, =EXTINT
  375 0000024C E3A06001        MOV              R6, #1
  376 00000250 E5C56000        STRB             R6, [R5]
  377 00000254         
  378 00000254         ; Invert edge-sensitivity (rising/falling) mode for EINT
                       0
  379 00000254 E59F50B4        LDR              R5, =EXTPOLAR
  380 00000258 E5956000        LDR              R6, [R5]
  381 0000025C E2266001        EOR              R6, #1
  382 00000260 E5C56000        STRB             R6, [R5]
  383 00000264         
  384 00000264         
  385 00000264         ;
  386 00000264         ; Examing polarity to determine if we should start or st
                       op timer
  387 00000264         ;
  388 00000264 E2266001        EOR              R6, #1
  389 00000268 E3560000        CMP              R6, #0
  390 0000026C 0A00000D        BEQ              endPause
  391 00000270         
  392 00000270 E59FA0A0        LDR              R10, =T1TCR
  393 00000274 E59A9000        LDR              R9, [R10]
  394 00000278 E3590001        CMP              R9, #0x01
  395 0000027C 0A000003        BEQ              pause
  396 00000280         
  397 00000280         ; Start TIMER1 using the Timer Control Register
  398 00000280         ; Set bit 0 of TCR to enable the timer
  399 00000280 E59F5090        LDR              R5, =T1TCR
  400 00000284 E3A06001        LDR              R6, =0x01
  401 00000288 E5C56000        STRB             R6, [R5]
  402 0000028C         
  403 0000028C EA000005        B                endPause
  404 00000290         pause
  405 00000290         
  406 00000290 E59F5080        LDR              R5, =T1TCR
  407 00000294 E3A06000        LDR              R6, =0x0
  408 00000298 E5C56000        STRB             R6, [R5]
  409 0000029C         
  410 0000029C E59FB060        LDR              R11,=count
  411 000002A0 E3A0A000        LDR              R10, =0x0
  412 000002A4 E58BA000        STR              R10, [R11]
  413 000002A8         
  414 000002A8         
  415 000002A8         endPause
  416 000002A8         
  417 000002A8 E59F30CC        LDR              R3, =VICVectAddr ; addr = VICVe
                                                            ctAddr
  418 000002AC E3A04000        MOV              R4, #0      ; tmp = 0;
  419 000002B0 E5834000        STR              R4, [R3]    ; Memory.Word(addr)
                                                             = tmp;
  420 000002B4         
  421 000002B4 E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
  422 000002B8         
  423 000002B8         
  424 000002B8         
  425 000002B8         ;



ARM Macro Assembler    Page 10 


  426 000002B8         ; Timer buzz interrupt handler
  427 000002B8         ;
  428 000002B8         TimerBuzzHandler
  429 000002B8         
  430 000002B8 E24EE004        SUB              LR, LR, #4  ; Adjust return add
                                                            ress
  431 000002BC E92D5FFF        STMFD            sp!, {r0-r12, LR} 
                                                            ; save registers
  432 000002C0         
  433 000002C0         ;
  434 000002C0         ; Reset TIMER0 interrupt by writing 0xFF to T0IR
  435 000002C0         ;
  436 000002C0 E59F50BC        LDR              R5, =T0IR
  437 000002C4 E3A060FF        MOV              R6, #0xFF
  438 000002C8 E5C56000        STRB             R6, [R5]
  439 000002CC         
  440 000002CC         
  441 000002CC         
  442 000002CC         ;
  443 000002CC         ; Change analog output to cause square wave signal
  444 000002CC         ; If signal is currently high, send it low. If its low, 
                       send it high
  445 000002CC         ;
  446 000002CC         
  447 000002CC         
  448 000002CC         ; Load the current DAC output value
  449 000002CC E59F50B4        LDR              R5, =DACR
  450 000002D0 E5956000        LDR              R6, [R5]
  451 000002D4         
  452 000002D4         ; Mask out all but bits 15...6
  453 000002D4 E59F70B0        LDR              R7, =0x0000FFC0
  454 000002D8 E0066007        AND              R6, R6, R7
  455 000002DC         
  456 000002DC E3560000        CMP              R6, #0      ; if (DACR == 0)
  457 000002E0 1A000001        BNE              high        ; {
  458 000002E4 E59F60A0        LDR              R6, =(volume << 6) ;  DACR = vo
                                                            lume << 6
  459 000002E8 EA000000        B                endif       ; }
  460 000002EC         high                                 ; else {
  461 000002EC E3A06000        LDR              R6, =0      ;  DACR = 0
  462 000002F0         endif                                ; }
  463 000002F0 E5856000        STR              R6, [R5]    ; store new DACR
  464 000002F4         
  465 000002F4         
  466 000002F4         ;
  467 000002F4         ; Clear source of interrupt by writing 0 to VICVectAddr
  468 000002F4         ;
  469 000002F4         quitBuzzer
  470 000002F4 E59F5080        LDR              R5, =VICVectAddr
  471 000002F8 E3A06000        MOV              R6, #0
  472 000002FC E5856000        STR              R6, [R5]
  473 00000300         
  474 00000300         
  475 00000300         ;
  476 00000300         ; Return
  477 00000300         ;
  478 00000300 E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
  479 00000304         



ARM Macro Assembler    Page 11 


  480 00000304         
  481 00000304 00000000 
              E002C010 
              E01FC148 
              E01FC14C 
              E01FC140 
              E0008004 
              E0008000 
              E0008070 
              E0008018 
              02DC6C00 
              E0008014 
              E000800C 
              FFFFF00C 
              FFFFF200 
              FFFFF100 
              00000000 
              FFFFF010 
              E0004004 
              E0004070 
              E0004018 
              00005996 
              E0004014 
              E000400C 
              00000000 
              00000000 
              E002C004 
              00000000 
              00000000 
              016E3600 
              00000000 
              FFFFFF00 
              00000000 
              E0004000 
              E006C000 
              0000FFC0         AREA             TestData, DATA, READWRITE
  482 00000000         
  483 00000000 00 00 00 
              00       count   SPACE            4
  484 00000004 00 00 00 
              00       delay   SPACE            4
  485 00000008         
  486 00000008         
  487 00000008                 END
Command Line: --debug --xref --apcs=interwork --depend=.\matchtimer.d -o.\match
timer.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="
NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\mat
chtimer.lst MatchTimer.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ButtonHandler 00000240

Symbol: ButtonHandler
   Definitions
      At line 364 in file MatchTimer.s
   Uses
      At line 158 in file MatchTimer.s
Comment: ButtonHandler used once
MatchTimer 00000000

Symbol: MatchTimer
   Definitions
      At line 1 in file MatchTimer.s
   Uses
      None
Comment: MatchTimer unused
TimerBuzzHandler 000002B8

Symbol: TimerBuzzHandler
   Definitions
      At line 428 in file MatchTimer.s
   Uses
      At line 222 in file MatchTimer.s
Comment: TimerBuzzHandler used once
TimerHandler 000001AC

Symbol: TimerHandler
   Definitions
      At line 295 in file MatchTimer.s
   Uses
      At line 259 in file MatchTimer.s
Comment: TimerHandler used once
dobuzz 00000224

Symbol: dobuzz
   Definitions
      At line 342 in file MatchTimer.s
   Uses
      At line 325 in file MatchTimer.s
Comment: dobuzz used once
endPause 000002A8

Symbol: endPause
   Definitions
      At line 415 in file MatchTimer.s
   Uses
      At line 390 in file MatchTimer.s
      At line 403 in file MatchTimer.s

endTimerHandler 00000230

Symbol: endTimerHandler
   Definitions
      At line 348 in file MatchTimer.s
   Uses
      At line 341 in file MatchTimer.s
Comment: endTimerHandler used once
endif 000002F0




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: endif
   Definitions
      At line 462 in file MatchTimer.s
   Uses
      At line 459 in file MatchTimer.s
Comment: endif used once
high 000002EC

Symbol: high
   Definitions
      At line 460 in file MatchTimer.s
   Uses
      At line 457 in file MatchTimer.s
Comment: high used once
noBuzz 00000208

Symbol: noBuzz
   Definitions
      At line 327 in file MatchTimer.s
   Uses
      At line 311 in file MatchTimer.s
Comment: noBuzz used once
pause 00000290

Symbol: pause
   Definitions
      At line 404 in file MatchTimer.s
   Uses
      At line 395 in file MatchTimer.s
Comment: pause used once
quitBuzzer 000002F4

Symbol: quitBuzzer
   Definitions
      At line 469 in file MatchTimer.s
   Uses
      None
Comment: quitBuzzer unused
start 00000000

Symbol: start
   Definitions
      At line 46 in file MatchTimer.s
   Uses
      At line 3 in file MatchTimer.s
Comment: start used once
stop 000001A8

Symbol: stop
   Definitions
      At line 292 in file MatchTimer.s
   Uses
      At line 292 in file MatchTimer.s
Comment: stop used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 481 in file MatchTimer.s
   Uses
      None
Comment: TestData unused
count 00000000

Symbol: count
   Definitions
      At line 483 in file MatchTimer.s
   Uses
      At line 56 in file MatchTimer.s
      At line 286 in file MatchTimer.s
      At line 321 in file MatchTimer.s
      At line 410 in file MatchTimer.s

delay 00000004

Symbol: delay
   Definitions
      At line 484 in file MatchTimer.s
   Uses
      At line 289 in file MatchTimer.s
Comment: delay used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DACR E006C000

Symbol: DACR
   Definitions
      At line 37 in file MatchTimer.s
   Uses
      At line 449 in file MatchTimer.s
Comment: DACR used once
EXTINT E01FC140

Symbol: EXTINT
   Definitions
      At line 18 in file MatchTimer.s
   Uses
      At line 80 in file MatchTimer.s
      At line 374 in file MatchTimer.s

EXTMODE E01FC148

Symbol: EXTMODE
   Definitions
      At line 19 in file MatchTimer.s
   Uses
      At line 67 in file MatchTimer.s
Comment: EXTMODE used once
EXTPOLAR E01FC14C

Symbol: EXTPOLAR
   Definitions
      At line 20 in file MatchTimer.s
   Uses
      At line 74 in file MatchTimer.s
      At line 379 in file MatchTimer.s

PINSEL1 E002C004

Symbol: PINSEL1
   Definitions
      At line 15 in file MatchTimer.s
   Uses
      At line 274 in file MatchTimer.s
Comment: PINSEL1 used once
PINSEL4 E002C010

Symbol: PINSEL4
   Definitions
      At line 17 in file MatchTimer.s
   Uses
      At line 60 in file MatchTimer.s
Comment: PINSEL4 used once
T0CTCR E0004070

Symbol: T0CTCR
   Definitions
      At line 23 in file MatchTimer.s
   Uses
      At line 176 in file MatchTimer.s
Comment: T0CTCR used once
T0IR E0004000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: T0IR
   Definitions
      At line 27 in file MatchTimer.s
   Uses
      At line 436 in file MatchTimer.s
Comment: T0IR used once
T0MCR E0004014

Symbol: T0MCR
   Definitions
      At line 25 in file MatchTimer.s
   Uses
      At line 187 in file MatchTimer.s
Comment: T0MCR used once
T0MR0 E0004018

Symbol: T0MR0
   Definitions
      At line 24 in file MatchTimer.s
   Uses
      At line 181 in file MatchTimer.s
Comment: T0MR0 used once
T0PR E000400C

Symbol: T0PR
   Definitions
      At line 26 in file MatchTimer.s
   Uses
      At line 192 in file MatchTimer.s
Comment: T0PR used once
T0TCR E0004004

Symbol: T0TCR
   Definitions
      At line 22 in file MatchTimer.s
   Uses
      At line 171 in file MatchTimer.s
      At line 307 in file MatchTimer.s
      At line 317 in file MatchTimer.s
      At line 333 in file MatchTimer.s

T1CTCR E0008070

Symbol: T1CTCR
   Definitions
      At line 30 in file MatchTimer.s
   Uses
      At line 105 in file MatchTimer.s
Comment: T1CTCR used once
T1IR E0008000

Symbol: T1IR
   Definitions
      At line 35 in file MatchTimer.s
   Uses
      At line 98 in file MatchTimer.s
      At line 298 in file MatchTimer.s




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

T1MCR E0008014

Symbol: T1MCR
   Definitions
      At line 33 in file MatchTimer.s
   Uses
      At line 123 in file MatchTimer.s
Comment: T1MCR used once
T1MR0 E0008018

Symbol: T1MR0
   Definitions
      At line 31 in file MatchTimer.s
   Uses
      At line 113 in file MatchTimer.s
      At line 304 in file MatchTimer.s

T1MR1 E000801C

Symbol: T1MR1
   Definitions
      At line 32 in file MatchTimer.s
   Uses
      None
Comment: T1MR1 unused
T1PR E000800C

Symbol: T1PR
   Definitions
      At line 34 in file MatchTimer.s
   Uses
      At line 129 in file MatchTimer.s
Comment: T1PR used once
T1TCR E0008004

Symbol: T1TCR
   Definitions
      At line 29 in file MatchTimer.s
   Uses
      At line 92 in file MatchTimer.s
      At line 301 in file MatchTimer.s
      At line 338 in file MatchTimer.s
      At line 344 in file MatchTimer.s
      At line 392 in file MatchTimer.s
      At line 399 in file MatchTimer.s
      At line 406 in file MatchTimer.s

VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 9 in file MatchTimer.s
   Uses
      At line 162 in file MatchTimer.s
      At line 226 in file MatchTimer.s
      At line 264 in file MatchTimer.s

VICIntSelect FFFFF00C




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Symbol: VICIntSelect
   Definitions
      At line 8 in file MatchTimer.s
   Uses
      At line 146 in file MatchTimer.s
      At line 210 in file MatchTimer.s
      At line 241 in file MatchTimer.s

VICVectAddr FFFFFF00

Symbol: VICVectAddr
   Definitions
      At line 13 in file MatchTimer.s
   Uses
      At line 350 in file MatchTimer.s
      At line 417 in file MatchTimer.s
      At line 470 in file MatchTimer.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 10 in file MatchTimer.s
   Uses
      At line 157 in file MatchTimer.s
      At line 221 in file MatchTimer.s
      At line 258 in file MatchTimer.s

VICVectPri0 FFFFF200

Symbol: VICVectPri0
   Definitions
      At line 12 in file MatchTimer.s
   Uses
      At line 152 in file MatchTimer.s
      At line 216 in file MatchTimer.s
      At line 250 in file MatchTimer.s

volume 000003FF

Symbol: volume
   Definitions
      At line 43 in file MatchTimer.s
   Uses
      At line 458 in file MatchTimer.s
Comment: volume used once
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file MatchTimer.s
   Uses
      None
Comment: main unused
1 symbol
382 symbols in table
