


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             BonusEffect, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         start                                ; This program appl
                                                            ies a 3x3 convoluti
                                                            on matrix to each p
                                                            ixel to produce dif
                                                            ferent type of effe
                                                            cts
   10 00000000         ; depending on the coefficents in the matrix.
   11 00000000         ; for example, the coefficient could be as follow:
   12 00000000         ; -1 -1 -1
   13 00000000         ; -1 9 -1
   14 00000000         ; -1 -1 -1
   15 00000000         
   16 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   17 00000004 E1A04000        MOV              R4, R0
   18 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   19 0000000C E1A05000        MOV              R5, R0      ; height
   20 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   21 00000014 E1A06000        MOV              R6, R0      ; width
   22 00000018 E3A07000        LDR              R7, =0      ; row
   23 0000001C E3A08000        LDR              R8, =0      ; column
   24 00000020         rowLoop
   25 00000020 E1570005        CMP              R7, R5      ; while(row <= heig
                                                            ht)
   26 00000024 8A000018        BHI              endRowLoop  ; {
   27 00000028         columnLoop
   28 00000028 E1580006        CMP              R8, R6      ; while (column <= 
                                                            width)
   29 0000002C 8A000013        BHI              endColumnLoop ; {
   30 00000030 E3570000        CMP              R7, #0
   31 00000034 DA00000F        BLE              notThisPixel
   32 00000038 E3580000        CMP              R8, #0
   33 0000003C DA00000D        BLE              notThisPixel
   34 00000040 E3570097        CMP              R7, #0x97
   35 00000044 AA00000B        BGE              notThisPixel
   36 00000048 E3580078        CMP              R8, #0x78
   37 0000004C AA000009        BGE              notThisPixel ; if (column>0 && 
                                                            column<width && row
                                                            >0 && row<heigtht) 
                                                            //if the pixel is n
                                                            ot on the edge
   38 00000050 E1A09108        MOV              R9, R8, LSL #2 ; column offset 
                                                            memory = column * 4
                                                            
   39 00000054 E00A0697        MUL              R10, R7, R6 ; 
   40 00000058 E1A0A10A        MOV              R10, R10, LSL #2 ; row offset m



ARM Macro Assembler    Page 2 


                                                            emory = row * width
                                                             * 4
   41 0000005C E084B00A        ADD              R11, R4, R10 ; 
   42 00000060 E08BB009        ADD              R11, R11, R9 ; pixel address = 
                                                            starting address + 
                                                            row offset + column
                                                             offset
   43 00000064 E3A0A000        LDR              R10, =0     ; pixel counter=0
   44 00000068 E1A0000B        MOV              R0, R11     ; 
   45 0000006C E1A0100A        MOV              R1, R10     ;
   46 00000070 EB000007        BL               pixelNeighborhood ; pixelNeighb
                                                            orhood(pixel addres
                                                            s, pixel counter)
   47 00000074         
   48 00000074 E58B3000        STR              R3, [R11]   ; store new pixel v
                                                            alue in pixel addre
                                                            ss
   49 00000078         notThisPixel                         ;
   50 00000078 E2888001        ADD              R8, R8, #1  ; column++
   51 0000007C EAFFFFE9        B                columnLoop  ; }
   52 00000080         endColumnLoop                        ;
   53 00000080 E3A08000        LDR              R8, =0      ; column = 0
   54 00000084 E2877001        ADD              R7, R7, #1  ; row++
   55 00000088 EAFFFFE4        B                rowLoop     ; }
   56 0000008C         endRowLoop
   57 0000008C         
   58 0000008C EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
   59 00000090         
   60 00000090 EA000077        B                stop
   61 00000094         
   62 00000094         
   63 00000094         ; parameter R0:pixel address R1:divisor
   64 00000094         ; return R0:pixel address R1:divisor R2:new pixel value 
                       
   65 00000094         pixelNeighborhood
   66 00000094 E92D4FF0        STMFD            sp!, {lr, R4-R11} 
                                                            ; push EVERYTHING
   67 00000098 E3A0B000        MOV              R11, #0     ; blue
   68 0000009C E3A0A000        MOV              R10, #0     ; green
   69 000000A0 E3A09000        MOV              R9, #0      ; red
   70 000000A4 E3E08000        MOV              R8, #-1     ;coefficent
   71 000000A8 E1A04000        MOV              R4, R0      ;pixel address
   72 000000AC E1A05106        MOV              R5, R6, LSL #2 ;row offset
   73 000000B0 E1A06001        MOV              R6, R1      ;divisor // pixel c
                                                            ounter
   74 000000B4 E0444005        SUB              R4, R4, R5  ; 
   75 000000B8 E2444004        ADD              R4, R4, #-4 ;pixel address = fi
                                                            rst pixel in the ma
                                                            trix
   76 000000BC         pnLoop
   77 000000BC E3560009        CMP              R6, #9      ;while(pixel counte
                                                            r < 9)
   78 000000C0 2A000011        BHS              pnEndLoop   ; { 
   79 000000C4 E2866001        ADD              R6, R6, #1  ; pixel counter++
   80 000000C8 E1A00006        MOV              R0, R6      ; 
   81 000000CC EB00003B        BL               coefficient ; coefficient(pixel
                                                             counter)
   82 000000D0 E1A08001        MOV              R8, R1      ; 



ARM Macro Assembler    Page 3 


   83 000000D4 E5940000        LDR              R0, [R4]    ; pixel = word size
                                                             RGB-pixel in pixel
                                                             address
   84 000000D8 EB00005D        BL               getColours  ; getColours(pixel)
                                                            
   85 000000DC E0010198        MUL              R1, R8, r1  ;
   86 000000E0 E0020298        MUL              R2, R8, R2  ;
   87 000000E4 E0030398        MUL              R3, R8, R3  ;
   88 000000E8 E08BB001        ADD              R11, R11, R1 ; blue total
   89 000000EC E08AA002        ADD              R10, R10, R2 ; green total
   90 000000F0 E0899003        ADD              R9, R9, R3  ; red total
   91 000000F4 E1A00006        MOV              R0, R6      ;
   92 000000F8 E1A01004        MOV              R1, R4      ;
   93 000000FC E1A02005        MOV              R2, R5      ;
   94 00000100 EB000015        BL               getNextAddress ; getNextAddress
                                                            (pixel counter, pix
                                                            el address, row off
                                                            set)
   95 00000104 E1A04001        MOV              R4, R1      ; pixel address = n
                                                            ew pixel address
   96 00000108 EAFFFFEB        B                pnLoop      ; }
   97 0000010C         pnEndLoop                            ;
   98 0000010C E3A08000        MOV              R8, #0      ;colour counter
   99 00000110 E3A03000        LDR              R3, =0      ;
  100 00000114         ColourLoop
  101 00000114 E3580003        CMP              R8, #3      ;
  102 00000118 2A00000D        BHS              endColourLoop
  103 0000011C E1A03403        mov              r3, r3, lsl #8
  104 00000120 E35900FF        cmp              r9, #0xff
  105 00000124 BA000001        blt              lowerThan0xff
  106 00000128 E3A090FF        mov              r9, #0xff
  107 0000012C EA000003        b                higherThanZero
  108 00000130         lowerThan0xff
  109 00000130 E3590000        cmp              r9, #0
  110 00000134 AA000001        bge              higherThanZero
  111 00000138 E3A09000        mov              r9, #0
  112 0000013C EAFFFFFF        b                higherThanZero
  113 00000140         higherThanZero
  114 00000140 E0833009        ADD              R3, r3, r9
  115 00000144 E1A0900A        mov              r9, r10
  116 00000148 E1A0A00B        mov              r10, r11
  117 0000014C E2888001        add              r8, r8, #1
  118 00000150 EAFFFFEF        b                ColourLoop
  119 00000154         endColourLoop
  120 00000154 E1A00004        MOV              R0, R4
  121 00000158 E8BD8FF0        LDMFD            sp!, {R4-R11, PC}
  122 0000015C         
  123 0000015C         ;getNextAddress
  124 0000015C         ;Takes which pixel in the matrix we're holding and retur
                       n the address in memory for the next pixel
  125 0000015C         ;parameter  R0:pixel counter
  126 0000015C         ;   R2:row offset
  127 0000015C         ;return  R1:next address
  128 0000015C         getNextAddress
  129 0000015C E92D4000        STMFD            sp!, {lr}
  130 00000160 E3500003        CMP              R0, #3      ; if((pixel counter
                                                            >0 && <3) || (pixel
                                                             counter>3 && <6) |
                                                            | (pixel counter>6 



ARM Macro Assembler    Page 4 


                                                            && <9)) 
  131 00000164 3A000007        BLO              pnIf1
  132 00000168 E3500004        CMP              R0, #4
  133 0000016C 3A000001        BLO              pnOr1
  134 00000170 E3500006        CMP              R0, #6
  135 00000174 3A000003        BLO              pnIf1
  136 00000178         pnOr1
  137 00000178 E3500007        CMP              R0, #7
  138 0000017C 3A000003        BLO              pnElse1
  139 00000180 E3500009        CMP              R0, #9
  140 00000184 2A000001        BHS              pnElse1
  141 00000188         pnIf1
  142 00000188 E2811004        ADD              R1, R1, #4  ;   return (address
                                                             = address +4)  
  143 0000018C EA00000A        B                pnEndIf
  144 00000190         pnElse1
  145 00000190 E3500003        CMP              R0, #3      ; if (pixel counter
                                                            ==3)||(pixel counte
                                                            r==6)
  146 00000194 0A000003        BEQ              pnIf2
  147 00000198 E3500006        CMP              R0, #6
  148 0000019C 0A000001        BEQ              pnIf2
  149 000001A0 E3500009        CMP              R0, #9
  150 000001A4 0A000002        BEQ              pnIf3
  151 000001A8         pnIf2
  152 000001A8 E0811002        ADD              R1, R1, R2
  153 000001AC E2411008        SUB              R1, R1, #8  ;  return (address 
                                                            = address + row off
                                                            set - 8)
  154 000001B0 EA000001        B                pnEndIf
  155 000001B4         pnIf3                                ; else
  156 000001B4 E0411002        SUB              R1, R1, R2  ; 
  157 000001B8 E2411004        SUB              R1, R1, #4  ;  return (address 
                                                            = address - rowoffs
                                                            et - 4)
  158 000001BC         pnEndIf
  159 000001BC E8BD8000        LDMFD            sp!, {PC}
  160 000001C0         
  161 000001C0         
  162 000001C0         
  163 000001C0         ;coefficient subroutine
  164 000001C0         ;Takes which pixel in matrix we're holding and return it
                       s corresponding coefficient in the convulution matrix
  165 000001C0         ;parameter R0:pixel counter
  166 000001C0         ;return R1:coefficient
  167 000001C0         coefficient
  168 000001C0 E92D4000        STMFD            sp!, {lr}
  169 000001C4 E3500001        CMP              R0, #1
  170 000001C8 1A000001        BNE              coefficient1
  171 000001CC E59F10A4        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 1,1 in the
                                                             matrix
  172 000001D0 EA00001E        B                return
  173 000001D4         coefficient1
  174 000001D4 E3500002        CMP              R0, #2
  175 000001D8 1A000001        BNE              coefficient2
  176 000001DC E59F1094        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 1,2 in the
                                                             matrix



ARM Macro Assembler    Page 5 


  177 000001E0 EA00001A        B                return
  178 000001E4         coefficient2
  179 000001E4 E3500003        CMP              R0, #3
  180 000001E8 1A000001        BNE              coefficient3
  181 000001EC E59F1084        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 1,3 in the
                                                             matrix
  182 000001F0 EA000016        B                return
  183 000001F4         coefficient3
  184 000001F4 E3500004        CMP              R0, #4
  185 000001F8 1A000001        BNE              coefficient4
  186 000001FC E59F1074        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 2,1 in the
                                                             matrix
  187 00000200 EA000012        B                return
  188 00000204         coefficient4
  189 00000204 E3500005        CMP              R0, #5
  190 00000208 1A000001        BNE              coefficient5
  191 0000020C E3A01009        LDR              R1, =9      ; coefficient for t
                                                            he pixel 2,2 in the
                                                             matrix
  192 00000210 EA00000E        B                return
  193 00000214         coefficient5
  194 00000214 E3500006        CMP              R0, #6
  195 00000218 1A000001        BNE              coefficient6
  196 0000021C E59F1054        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 2,3 in the
                                                             matrix
  197 00000220 EA00000A        B                return
  198 00000224         coefficient6
  199 00000224 E3500007        CMP              R0, #7
  200 00000228 1A000001        BNE              coefficient7
  201 0000022C E59F1044        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 3,1 in the
                                                             matrix
  202 00000230 EA000006        B                return
  203 00000234         coefficient7
  204 00000234 E3500008        CMP              R0, #8
  205 00000238 1A000001        BNE              coefficient8
  206 0000023C E59F1034        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 3,2 in the
                                                             matrix
  207 00000240 EA000002        B                return
  208 00000244         coefficient8
  209 00000244 E3500009        CMP              R0, #9
  210 00000248 1A000000        BNE              return
  211 0000024C E59F1024        LDR              R1, =-1     ; coefficient for t
                                                            he pixel 3,3 in the
                                                             matrix
  212 00000250         return
  213 00000250 E8BD8000        LDMFD            sp!, {PC}
  214 00000254         
  215 00000254         ;getColours subroutine
  216 00000254         ;Takes a word size RGB-pixel and seperate the three colo
                       r with a mask and the AND operation
  217 00000254         ;parameter r0:pixel value
  218 00000254         ;return r1:blue value
  219 00000254         ;  r2:green value
  220 00000254         ;  r3:red value



ARM Macro Assembler    Page 6 


  221 00000254         getColours
  222 00000254 E92D4010        STMFD            sp!, {R4, lr}
  223 00000258 E3A040FF        MOV              R4, #0x000000FF
  224 0000025C E0001004        AND              R1, R0, R4  ;blue
  225 00000260 E1A00420        MOV              R0, R0, LSR #8
  226 00000264 E0002004        AND              R2, R0, R4  ;green
  227 00000268 E1A00420        MOV              R0, R0, LSR #8
  228 0000026C E0003004        AND              R3, R0, R4  ;red
  229 00000270 E8BD8010        LDMFD            sp!, {R4, PC}
  230 00000274 EAFFFFFE 
                       stop    B                stop
  231 00000278                 END
              FFFFFFFF 
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BonusEffect 00000000

Symbol: BonusEffect
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: BonusEffect unused
ColourLoop 00000114

Symbol: ColourLoop
   Definitions
      At line 100 in file BonusEffect.s
   Uses
      At line 118 in file BonusEffect.s
Comment: ColourLoop used once
coefficient 000001C0

Symbol: coefficient
   Definitions
      At line 167 in file BonusEffect.s
   Uses
      At line 81 in file BonusEffect.s
Comment: coefficient used once
coefficient1 000001D4

Symbol: coefficient1
   Definitions
      At line 173 in file BonusEffect.s
   Uses
      At line 170 in file BonusEffect.s
Comment: coefficient1 used once
coefficient2 000001E4

Symbol: coefficient2
   Definitions
      At line 178 in file BonusEffect.s
   Uses
      At line 175 in file BonusEffect.s
Comment: coefficient2 used once
coefficient3 000001F4

Symbol: coefficient3
   Definitions
      At line 183 in file BonusEffect.s
   Uses
      At line 180 in file BonusEffect.s
Comment: coefficient3 used once
coefficient4 00000204

Symbol: coefficient4
   Definitions
      At line 188 in file BonusEffect.s
   Uses
      At line 185 in file BonusEffect.s
Comment: coefficient4 used once
coefficient5 00000214

Symbol: coefficient5



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 193 in file BonusEffect.s
   Uses
      At line 190 in file BonusEffect.s
Comment: coefficient5 used once
coefficient6 00000224

Symbol: coefficient6
   Definitions
      At line 198 in file BonusEffect.s
   Uses
      At line 195 in file BonusEffect.s
Comment: coefficient6 used once
coefficient7 00000234

Symbol: coefficient7
   Definitions
      At line 203 in file BonusEffect.s
   Uses
      At line 200 in file BonusEffect.s
Comment: coefficient7 used once
coefficient8 00000244

Symbol: coefficient8
   Definitions
      At line 208 in file BonusEffect.s
   Uses
      At line 205 in file BonusEffect.s
Comment: coefficient8 used once
columnLoop 00000028

Symbol: columnLoop
   Definitions
      At line 27 in file BonusEffect.s
   Uses
      At line 51 in file BonusEffect.s
Comment: columnLoop used once
endColourLoop 00000154

Symbol: endColourLoop
   Definitions
      At line 119 in file BonusEffect.s
   Uses
      At line 102 in file BonusEffect.s
Comment: endColourLoop used once
endColumnLoop 00000080

Symbol: endColumnLoop
   Definitions
      At line 52 in file BonusEffect.s
   Uses
      At line 29 in file BonusEffect.s
Comment: endColumnLoop used once
endRowLoop 0000008C

Symbol: endRowLoop
   Definitions
      At line 56 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 26 in file BonusEffect.s
Comment: endRowLoop used once
getColours 00000254

Symbol: getColours
   Definitions
      At line 221 in file BonusEffect.s
   Uses
      At line 84 in file BonusEffect.s
Comment: getColours used once
getNextAddress 0000015C

Symbol: getNextAddress
   Definitions
      At line 128 in file BonusEffect.s
   Uses
      At line 94 in file BonusEffect.s
Comment: getNextAddress used once
higherThanZero 00000140

Symbol: higherThanZero
   Definitions
      At line 113 in file BonusEffect.s
   Uses
      At line 107 in file BonusEffect.s
      At line 110 in file BonusEffect.s
      At line 112 in file BonusEffect.s

lowerThan0xff 00000130

Symbol: lowerThan0xff
   Definitions
      At line 108 in file BonusEffect.s
   Uses
      At line 105 in file BonusEffect.s
Comment: lowerThan0xff used once
notThisPixel 00000078

Symbol: notThisPixel
   Definitions
      At line 49 in file BonusEffect.s
   Uses
      At line 31 in file BonusEffect.s
      At line 33 in file BonusEffect.s
      At line 35 in file BonusEffect.s
      At line 37 in file BonusEffect.s

pixelNeighborhood 00000094

Symbol: pixelNeighborhood
   Definitions
      At line 65 in file BonusEffect.s
   Uses
      At line 46 in file BonusEffect.s
Comment: pixelNeighborhood used once
pnElse1 00000190

Symbol: pnElse1
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 144 in file BonusEffect.s
   Uses
      At line 138 in file BonusEffect.s
      At line 140 in file BonusEffect.s

pnEndIf 000001BC

Symbol: pnEndIf
   Definitions
      At line 158 in file BonusEffect.s
   Uses
      At line 143 in file BonusEffect.s
      At line 154 in file BonusEffect.s

pnEndLoop 0000010C

Symbol: pnEndLoop
   Definitions
      At line 97 in file BonusEffect.s
   Uses
      At line 78 in file BonusEffect.s
Comment: pnEndLoop used once
pnIf1 00000188

Symbol: pnIf1
   Definitions
      At line 141 in file BonusEffect.s
   Uses
      At line 131 in file BonusEffect.s
      At line 135 in file BonusEffect.s

pnIf2 000001A8

Symbol: pnIf2
   Definitions
      At line 151 in file BonusEffect.s
   Uses
      At line 146 in file BonusEffect.s
      At line 148 in file BonusEffect.s

pnIf3 000001B4

Symbol: pnIf3
   Definitions
      At line 155 in file BonusEffect.s
   Uses
      At line 150 in file BonusEffect.s
Comment: pnIf3 used once
pnLoop 000000BC

Symbol: pnLoop
   Definitions
      At line 76 in file BonusEffect.s
   Uses
      At line 96 in file BonusEffect.s
Comment: pnLoop used once
pnOr1 00000178

Symbol: pnOr1



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 136 in file BonusEffect.s
   Uses
      At line 133 in file BonusEffect.s
Comment: pnOr1 used once
return 00000250

Symbol: return
   Definitions
      At line 212 in file BonusEffect.s
   Uses
      At line 172 in file BonusEffect.s
      At line 177 in file BonusEffect.s
      At line 182 in file BonusEffect.s
      At line 187 in file BonusEffect.s
      At line 192 in file BonusEffect.s
      At line 197 in file BonusEffect.s
      At line 202 in file BonusEffect.s
      At line 207 in file BonusEffect.s
      At line 210 in file BonusEffect.s

rowLoop 00000020

Symbol: rowLoop
   Definitions
      At line 24 in file BonusEffect.s
   Uses
      At line 55 in file BonusEffect.s
Comment: rowLoop used once
start 00000000

Symbol: start
   Definitions
      At line 9 in file BonusEffect.s
   Uses
      At line 7 in file BonusEffect.s
Comment: start used once
stop 00000274

Symbol: stop
   Definitions
      At line 230 in file BonusEffect.s
   Uses
      At line 60 in file BonusEffect.s
      At line 230 in file BonusEffect.s

33 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      At line 16 in file BonusEffect.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 18 in file BonusEffect.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 20 in file BonusEffect.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 58 in file BonusEffect.s
Comment: putPic used once
5 symbols
377 symbols in table
