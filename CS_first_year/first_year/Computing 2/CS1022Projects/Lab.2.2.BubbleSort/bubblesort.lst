


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             BubbleSort, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E59F4080        LDR              R4, =array  ; address of array
    7 00000004 E59F5080        LDR              R5, =arrayN ; address of array 
                                                            size
    8 00000008 E5955000        LDR              R5, [R5]    ; load array size
    9 0000000C E3A08000        LDR              R8, =0      ; swapped = false
   10 00000010 EA000005        B                sort
   11 00000014         
   12 00000014         
   13 00000014         ; swap subroutine
   14 00000014         ; Take two elements from a one-dimensional array and swa
                       p them.
   15 00000014         ; parameters R0 : array address
   16 00000014         ;    R1 : index of first element
   17 00000014         ;    R2 : index of second element
   18 00000014         swap
   19 00000014 E92D40C0        STMFD            sp!, {R6-R7, lr}
   20 00000018 E7906101        LDR              R6, [R0, R1, LSL #2] ; load fir
                                                            st element from fir
                                                            st index
   21 0000001C E7907102        LDR              R7, [R0, R2, LSL #2] ; load sec
                                                            ond element from se
                                                            cond index
   22 00000020 E7806102        STR              R6, [R0, R2, LSL #2] ; store fi
                                                            rst element in seco
                                                            nd index
   23 00000024 E7807101        STR              R7, [R0, R1, LSL #2] ; store se
                                                            cond element in fir
                                                            st index
   24 00000028 E8BD80C0        LDMFD            sp!, {R6-R7, pc}
   25 0000002C         
   26 0000002C         
   27 0000002C         ; sort program
   28 0000002C         ;
   29 0000002C         sort
   30 0000002C EA000001        B                do
   31 00000030         while1                               ; while ( swapped =
                                                            = true )
   32 00000030 E3580000        CMP              R8, #0      ; {
   33 00000034 0A000012        BEQ              endwhile1
   34 00000038         do
   35 00000038 E3A08000        LDR              R8, =0      ; swapped = false
   36 0000003C E2455001        ADD              R5, R5, #-1 ; array size = arra
                                                            y size - 1
   37 00000040 E3A06001        LDR              R6, =1      ; index = 1 
   38 00000044 E3A07000        LDR              R7, =0      ; index bis = index
                                                             - 1
   39 00000048         while2                               ; while ( index < a
                                                            rray size )
   40 00000048 E1560005        CMP              R6, R5      ; {
   41 0000004C CA00000B        BGT              endwhile2
   42 00000050 E7949106        LDR              R9, [R4, R6, LSL #2] ;  load fi
                                                            rst element from in
                                                            dex
   43 00000054 E794A107        LDR              R10, [R4, R7, LSL #2] ;  load s



ARM Macro Assembler    Page 2 


                                                            econd element from 
                                                            index bis
   44 00000058 E159000A        CMP              R9, R10     ;  if ( first eleme
                                                            nt < second element
                                                             )
   45 0000005C CA000004        BGT              elseif      ;  {
   46 00000060 E1A00004        MOV              R0, R4      ;   R0 = array addr
                                                            ess
   47 00000064 E1A01006        MOV              R1, R6      ;   R1 = first elem
                                                            ent
   48 00000068 E1A02007        MOV              R2, R7      ;   R2 = second ele
                                                            ment
   49 0000006C EBFFFFE8        BL               swap        ;   swap ( R0, R1, 
                                                            R2)
   50 00000070 E3A08001        LDR              R8, =1      ;   swapped = true
   51 00000074         elseif                               ;  }
   52 00000074 E2866001        ADD              R6, R6, #1  ; index += 1
   53 00000078 E2877001        ADD              R7, R7, #1  ;  index bis += 1
   54 0000007C EAFFFFF1        B                while2      ; }
   55 00000080         endwhile2                            ;  
   56 00000080 EAFFFFEA        B                while1      ; }
   57 00000084         endwhile1
   58 00000084 EAFFFFFE 
                       stop    B                stop
   59 00000088         
   60 00000088         
   61 00000088 00000000 
              00000000         AREA             TestArray, DATA, READWRITE
   62 00000000         
   63 00000000         ; Array Size
   64 00000000 0000000F 
                       arrayN  DCD              15
   65 00000004         
   66 00000004         ; Array Elements
   67 00000004 00000021 
              00000011 
              00000012 
              0000005C 
              00000031 
              0000001C 
              0000004E 
              0000004B 
              00000016 
              0000000D 
              00000013 
              0000000D 
              00000008 
              0000002C 
              00000023 array   DCD              33,17,18,92,49,28,78,75,22,13,1
9,13,8,44,35
   68 00000040         
   69 00000040                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bubblesort.d -o.\bubbl
esort.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="
NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\bub
blesort.lst BubbleSort.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BubbleSort 00000000

Symbol: BubbleSort
   Definitions
      At line 1 in file BubbleSort.s
   Uses
      None
Comment: BubbleSort unused
do 00000038

Symbol: do
   Definitions
      At line 34 in file BubbleSort.s
   Uses
      At line 30 in file BubbleSort.s
Comment: do used once
elseif 00000074

Symbol: elseif
   Definitions
      At line 51 in file BubbleSort.s
   Uses
      At line 45 in file BubbleSort.s
Comment: elseif used once
endwhile1 00000084

Symbol: endwhile1
   Definitions
      At line 57 in file BubbleSort.s
   Uses
      At line 33 in file BubbleSort.s
Comment: endwhile1 used once
endwhile2 00000080

Symbol: endwhile2
   Definitions
      At line 55 in file BubbleSort.s
   Uses
      At line 41 in file BubbleSort.s
Comment: endwhile2 used once
sort 0000002C

Symbol: sort
   Definitions
      At line 29 in file BubbleSort.s
   Uses
      At line 10 in file BubbleSort.s
Comment: sort used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file BubbleSort.s
   Uses
      At line 3 in file BubbleSort.s
Comment: start used once
stop 00000084

Symbol: stop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 58 in file BubbleSort.s
   Uses
      At line 58 in file BubbleSort.s
Comment: stop used once
swap 00000014

Symbol: swap
   Definitions
      At line 18 in file BubbleSort.s
   Uses
      At line 49 in file BubbleSort.s
Comment: swap used once
while1 00000030

Symbol: while1
   Definitions
      At line 31 in file BubbleSort.s
   Uses
      At line 56 in file BubbleSort.s
Comment: while1 used once
while2 00000048

Symbol: while2
   Definitions
      At line 39 in file BubbleSort.s
   Uses
      At line 54 in file BubbleSort.s
Comment: while2 used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestArray 00000000

Symbol: TestArray
   Definitions
      At line 61 in file BubbleSort.s
   Uses
      None
Comment: TestArray unused
array 00000004

Symbol: array
   Definitions
      At line 67 in file BubbleSort.s
   Uses
      At line 6 in file BubbleSort.s
Comment: array used once
arrayN 00000000

Symbol: arrayN
   Definitions
      At line 64 in file BubbleSort.s
   Uses
      At line 7 in file BubbleSort.s
Comment: arrayN used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file BubbleSort.s
   Uses
      None
Comment: main unused
1 symbol
354 symbols in table
