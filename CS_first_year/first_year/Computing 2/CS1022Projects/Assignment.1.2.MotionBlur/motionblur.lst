


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         start
   10 00000000         
   11 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   12 00000004 E1A04000        MOV              R4, R0
   13 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   14 0000000C E1A05000        MOV              R5, R0
   15 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   16 00000014 EBFFFFFE        BL               putPic
   17 00000018 E1A06000        MOV              R6, R0
   18 0000001C E286B001        ADD              R11, R6, #1
   19 00000020         ;MOV R11, R11, LSL #2 ; diagonal offset ((width+1)*4)
   20 00000020 E0050596        MUL              R5, R6, R5
   21 00000024 E1A05105        MOV              R5, R5, LSL #2 
                                                            ; maximum offset 
   22 00000028 E3A06000        MOV              R6, #0      ; offset
   23 0000002C E3A0A005        MOV              R10, #5     ; radius
   24 00000030         loop
   25 00000030 E1560005        CMP              R6, R5      ; while (offset<=ma
                                                            ximum offset) //mai
                                                            n loop 
   26 00000034 CA00003B        BGT              endLoop     ; {
   27 00000038 E3A09000        LDR              R9, =0      ; pixel counter = 0
                                                            
   28 0000003C E0847006        ADD              R7, R4, R6  ; pixel address = s
                                                            tarting address + o
                                                            ffset
   29 00000040 E0000B9A        MUL              R0, R10, R11 ; R0 = radius*diag
                                                            onale offset
   30 00000044 E0877000        ADD              R7, R7, R0  ; last pixel in the
                                                             diagonal = pixel a
                                                            ddress + R0
   31 00000048 E0840005        ADD              R0, R4, R5  ; last pixel addres
                                                            s = starting addres
                                                            s + maximum offset
   32 0000004C         while2                               ; 
   33 0000004C E1570000        CMP              R7, R0      ; while ( last pixe
                                                            l in the diagonale 
                                                            address < last pixe
                                                            l address )
   34 00000050 9A000002        BLS              else2       ; {
   35 00000054 E047700B        SUB              R7, R7, R11 ; last pixel in the
                                                             diagonale address 
                                                            = last pixel in the
                                                             diagonale address 
                                                            - diagonale offset



ARM Macro Assembler    Page 2 


   36 00000058 E2899001        ADD              R9, R9, #1  ; pixel counter++
   37 0000005C EAFFFFFA        B                while2      ; }
   38 00000060         else2                                ;
   39 00000060 E0847006        ADD              R7, R4, R6  ; pixel address
   40 00000064 E0000B9A        MUL              R0, R10, R11 ; radius*diagonale
                                                             offset
   41 00000068 E0477000        SUB              R7, R7, R0  ; first pixel in th
                                                            e diagonale = pixel
                                                             address - radius*d
                                                            iagonale offset
   42 0000006C         while1                               ; 
   43 0000006C E1570004        CMP              R7, R4      ; while ( first pix
                                                            el in the diagonale
                                                             > first pixel addr
                                                            ess )
   44 00000070 2A000002        BHS              else1       ; {
   45 00000074 E087700B        ADD              R7, R7, R11 ;  first pixel in t
                                                            he diagonale =first
                                                             pixel in the diago
                                                            nale + diagonale of
                                                            fset
   46 00000078 E2899001        ADD              R9, R9, #1  ;  pixel count++ di
                                                            agonale
   47 0000007C EAFFFFFA        B                while1      ; }
   48 00000080         else1
   49 00000080 E3A08001        LDR              R8, =1      ; divisor = 1
   50 00000084 E92D0070        STMFD            sp!, {R4-R6} ; push starting ad
                                                            dress, maximum offs
                                                            et and offset on st
                                                            ack
   51 00000088 E3A04000        LDR              R4, =0
   52 0000008C E3A05000        LDR              R5, =0
   53 00000090 E3A06000        LDR              R6, =0
   54 00000094         loop2
   55 00000094 E08A000A        ADD              R0, R10, R10
   56 00000098 E2800001        ADD              R0, R0, #1  ; number of pixel i
                                                            n diagonale blur = 
                                                            radius + radius + 1
                                                            
   57 0000009C E92D0400        STMFD            sp!, {R10}  ; push radius on st
                                                            ack
   58 000000A0 E1590000        CMP              R9, R0      ; while ( pixel cou
                                                            nter < number of pi
                                                            xel in diagonale ) 
                                                            
   59 000000A4 2A00000C        BHS              endLoop2    ; {
   60 000000A8 E3A04000        LDR              R4, =0
   61 000000AC E3A0A000        LDR              R10, =0
   62 000000B0 E597A000        LDR              R10, [R7]   ; pixel = load pixe
                                                            l from diagonale pi
                                                            xel address
   63 000000B4 E1A0000A        MOV              R0, R10
   64 000000B8 EB000024        BL               getColours  ; getColours(pixel)
                                                            
   65 000000BC E087700B        ADD              R7, R7, R11 ; pixel address = p
                                                            ixel address + diag
                                                            onale offset
   66 000000C0 E2899001        ADD              R9, R9, #1  ; pixel counter++
   67 000000C4 E2888001        ADD              R8, R8, #1  ; divisor++



ARM Macro Assembler    Page 3 


   68 000000C8 E0866001        ADD              R6, R6, R1  ; green total
   69 000000CC E0855002        ADD              R5, R5, R2  ; blue total 
   70 000000D0 E0844003        ADD              R4, R4, R3  ; red total
   71 000000D4 E8BD0400        LDMFD            sp!, {R10}  ; pop radius from s
                                                            tack
   72 000000D8 EAFFFFED        B                loop2       ; }
   73 000000DC         endLoop2
   74 000000DC E3A0A000        LDR              R10, =0     ; colour counter = 
                                                            0
   75 000000E0 E3A07000        LDR              R7, =0      ; new pixel value
   76 000000E4         loop3
   77 000000E4 E35A0003        CMP              R10, #3     ; while (pixel coun
                                                            ter < 3)
   78 000000E8 2A000008        BHS              endLoop3    ; {
   79 000000EC E1A07407        MOV              R7, R7, LSL #8 ; shift pixel va
                                                            lue to the left by 
                                                            2 hexadecimal digit
                                                            
   80 000000F0 E1A00004        MOV              R0, R4
   81 000000F4 E1A01008        MOV              R1, R8
   82 000000F8 EB00000C        BL               divide      ; divide(colour tot
                                                            al, divisor)
   83 000000FC E0877002        ADD              R7, R7, R2  ; pixel value = pix
                                                            el value + new colo
                                                            ur value 
   84 00000100 E28AA001        ADD              R10, R10, #1 ; colour counter++
                                                            
   85 00000104 E1A04005        MOV              R4, R5      ; red total = blue 
                                                            total
   86 00000108 E1A05006        MOV              R5, R6      ; blue total = gree
                                                            n total
   87 0000010C EAFFFFF4        B                loop3       ; }
   88 00000110         endLoop3                             ;
   89 00000110 E8BD0400        LDMFD            sp!, {R10}  ; load radius from 
                                                            stack 
   90 00000114 E8BD0070        LDMFD            sp!, {R4-R6} ; load back starti
                                                            ng address, maximum
                                                             offset and offset 
                                                            from stack
   91 00000118 E0848006        ADD              R8, R4, R6  ; original pixel ad
                                                            dress = starting ad
                                                            dress + offset
   92 0000011C E5887000        STR              R7, [R8]    ; store new pixel v
                                                            alue in its address
                                                            
   93 00000120 E2866004        ADD              R6, R6, #4  ; offset += 4
   94 00000124 EAFFFFC1        B                loop        ; }
   95 00000128         endLoop
   96 00000128 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
   97 0000012C EA00000F        B                stop
   98 00000130         
   99 00000130         ;divide subroutine
  100 00000130         ;Take a number and a divisor, returns the remainder and 
                       quotient of the division
  101 00000130         ;parameters R0: number to be divided
  102 00000130         ;   R1: divisor
  103 00000130         ;return R0: remainder
  104 00000130         ;  R1: divisor



ARM Macro Assembler    Page 4 


  105 00000130         ;  R2: quotient
  106 00000130         divide
  107 00000130 E92D4000        STMFD            sp!, {lr}
  108 00000134 E3A02000        LDR              R2, =0
  109 00000138         subwhile
  110 00000138 E1500001        CMP              R0, R1
  111 0000013C BA000002        BLT              subendwhile
  112 00000140 E0400001        SUB              R0, R0, R1
  113 00000144 E2822001        ADD              R2, R2, #1
  114 00000148 EAFFFFFA        B                subwhile
  115 0000014C         subendwhile
  116 0000014C E8BD8000        LDMFD            sp!, {pc}
  117 00000150         
  118 00000150         ;getColours subroutine
  119 00000150         ;Takes a word size RGB-pixel and seperate the three colo
                       r with a mask and the AND operation
  120 00000150         ;parameter r0:pixel value
  121 00000150         ;return r1:blue value
  122 00000150         ;  r2:green value
  123 00000150         ;  r3:red value 
  124 00000150         getColours
  125 00000150 E92D4010        STMFD            sp!, {R4, lr}
  126 00000154 E3A040FF        MOV              R4, #0x000000FF
  127 00000158 E0001004        AND              R1, R0, R4  ; blue
  128 0000015C E1A00420        MOV              R0, R0, LSR #8
  129 00000160 E0002004        AND              R2, R0, R4  ; green
  130 00000164 E1A00420        MOV              R0, R0, LSR #8
  131 00000168 E0003004        AND              R3, R0, R4  ; red
  132 0000016C E8BD8010        LDMFD            sp!, {R4, PC}
  133 00000170         
  134 00000170         
  135 00000170 EAFFFFFE 
                       stop    B                stop
  136 00000174                 END
Command Line: --debug --xref --apcs=interwork --depend=.\motionblur.d -o.\motio
nblur.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="
NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\mot
ionblur.lst MotionBlur.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file MotionBlur.s
   Uses
      None
Comment: MotionBlur unused
divide 00000130

Symbol: divide
   Definitions
      At line 106 in file MotionBlur.s
   Uses
      At line 82 in file MotionBlur.s
Comment: divide used once
else1 00000080

Symbol: else1
   Definitions
      At line 48 in file MotionBlur.s
   Uses
      At line 44 in file MotionBlur.s
Comment: else1 used once
else2 00000060

Symbol: else2
   Definitions
      At line 38 in file MotionBlur.s
   Uses
      At line 34 in file MotionBlur.s
Comment: else2 used once
endLoop 00000128

Symbol: endLoop
   Definitions
      At line 95 in file MotionBlur.s
   Uses
      At line 26 in file MotionBlur.s
Comment: endLoop used once
endLoop2 000000DC

Symbol: endLoop2
   Definitions
      At line 73 in file MotionBlur.s
   Uses
      At line 59 in file MotionBlur.s
Comment: endLoop2 used once
endLoop3 00000110

Symbol: endLoop3
   Definitions
      At line 88 in file MotionBlur.s
   Uses
      At line 78 in file MotionBlur.s
Comment: endLoop3 used once
getColours 00000150

Symbol: getColours



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 124 in file MotionBlur.s
   Uses
      At line 64 in file MotionBlur.s
Comment: getColours used once
loop 00000030

Symbol: loop
   Definitions
      At line 24 in file MotionBlur.s
   Uses
      At line 94 in file MotionBlur.s
Comment: loop used once
loop2 00000094

Symbol: loop2
   Definitions
      At line 54 in file MotionBlur.s
   Uses
      At line 72 in file MotionBlur.s
Comment: loop2 used once
loop3 000000E4

Symbol: loop3
   Definitions
      At line 76 in file MotionBlur.s
   Uses
      At line 87 in file MotionBlur.s
Comment: loop3 used once
start 00000000

Symbol: start
   Definitions
      At line 9 in file MotionBlur.s
   Uses
      At line 7 in file MotionBlur.s
Comment: start used once
stop 00000170

Symbol: stop
   Definitions
      At line 135 in file MotionBlur.s
   Uses
      At line 97 in file MotionBlur.s
      At line 135 in file MotionBlur.s

subendwhile 0000014C

Symbol: subendwhile
   Definitions
      At line 115 in file MotionBlur.s
   Uses
      At line 111 in file MotionBlur.s
Comment: subendwhile used once
subwhile 00000138

Symbol: subwhile
   Definitions
      At line 109 in file MotionBlur.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 114 in file MotionBlur.s
Comment: subwhile used once
while1 0000006C

Symbol: while1
   Definitions
      At line 42 in file MotionBlur.s
   Uses
      At line 47 in file MotionBlur.s
Comment: while1 used once
while2 0000004C

Symbol: while2
   Definitions
      At line 32 in file MotionBlur.s
   Uses
      At line 37 in file MotionBlur.s
Comment: while2 used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file MotionBlur.s
   Uses
      At line 11 in file MotionBlur.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file MotionBlur.s
   Uses
      At line 13 in file MotionBlur.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file MotionBlur.s
   Uses
      At line 15 in file MotionBlur.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file MotionBlur.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file MotionBlur.s
   Uses
      At line 16 in file MotionBlur.s
      At line 96 in file MotionBlur.s

5 symbols
359 symbols in table
