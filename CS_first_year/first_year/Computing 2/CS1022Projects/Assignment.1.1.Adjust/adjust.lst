


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Adjust, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         start
   10 00000000         
   11 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   12 00000004 E1A04000        MOV              R4, R0
   13 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   14 0000000C E1A05000        MOV              R5, R0
   15 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   16 00000014 E1A06000        MOV              R6, R0
   17 00000018 E0050596        MUL              R5, R6, R5
   18 0000001C E1A05105        MOV              R5, R5, LSL #2 ; R5 = maximum o
                                                            ffset
   19 00000020 E3A06000        MOV              R6, #0      ; R6 = offset
   20 00000024         loop                                 ; while(offset<=max
                                                            imum offset)
   21 00000024 E1560005        CMP              R6, R5      ; {
   22 00000028 2A000007        BHS              endLoop     ;
   23 0000002C E7947006        LDR              R7, [R4, R6] ; pixel = load fro
                                                            m starting address 
                                                            + offset
   24 00000030 E1A00007        MOV              R0, R7      ;
   25 00000034 EB000006        BL               getColours  ; getColours(pixel)
                                                             
   26 00000038 EB00000D        BL               changeColours ; changeColours(g
                                                            reen, blue, red)
   27 0000003C E1A07000        MOV              R7, R0      ; R7 = new pixel
   28 00000040 E7847006        STR              R7, [R4, R6] ; store in startin
                                                            g address + offset 
                                                            = new pixel
   29 00000044 E2866004        ADD              R6, R6, #4  ; offset += 4
   30 00000048 EAFFFFF5        B                loop        ; }
   31 0000004C         endLoop                              ;
   32 0000004C         
   33 0000004C EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
   34 00000050 EA00001F        B                stop
   35 00000054         
   36 00000054         
   37 00000054         
   38 00000054         ;getColours subroutine
   39 00000054         ;Takes a word size RGB-pixel and seperate the three colo
                       r with a mask and the AND operation
   40 00000054         ;parameter r0:pixel value
   41 00000054         ;return r1:green value
   42 00000054         ;  r2:blue value
   43 00000054         ;  r3:red value



ARM Macro Assembler    Page 2 


   44 00000054         getColours
   45 00000054 E92D4010        STMFD            sp!, {R4, lr}
   46 00000058 E3A040FF        MOV              R4, #0x000000FF
   47 0000005C E0001004        AND              R1, R0, R4  ;green
   48 00000060 E1A00420        MOV              R0, R0, LSR #8
   49 00000064 E0002004        AND              R2, R0, R4  ;blue
   50 00000068 E1A00420        MOV              R0, R0, LSR #8
   51 0000006C E0003004        AND              R3, R0, R4  ;red
   52 00000070 E8BD8010        LDMFD            sp!, {R4, PC}
   53 00000074         
   54 00000074         
   55 00000074         
   56 00000074         
   57 00000074         ;changeColours subroutine
   58 00000074         ;Takes the seperated RGB values of a pixel and changes t
                       he contrast and brightness
   59 00000074         ;and combines them back into a single word size RGB-pixe
                       l
   60 00000074         ;parameters r1:green value
   61 00000074         ;   r2:blue value
   62 00000074         ;   r3:red value
   63 00000074         ;return  r0:new RGB-pixel
   64 00000074         changeColours
   65 00000074 E92D40E0        STMFD            sp!, {lr, R5-R7}
   66 00000078 E2000000        BIC              R0, #0xFFFFFFFF ; clear bits fr
                                                            om return pixel
   67 0000007C E3A05028        MOV              R5, #40     ; contrast
   68 00000080 E3A06000        MOV              R6, #0      ; brightness
   69 00000084 E3A07000        MOV              R7, #0      ; pixel counter = 0
                                                            
   70 00000088         changeColoursLoop                    ;
   71 00000088 E3570003        CMP              R7, #3      ; while(pixel count
                                                            er<3)
   72 0000008C AA00000F        BGE              endChangeColoursLoop ; {
   73 00000090 E1A00400        MOV              R0, R0, LSL #8 ; shifts to the 
                                                            left the return pix
                                                            el by 2 hexadecimal
                                                             digit
   74 00000094 E0030395        MUL              R3, R5, R3  ; multiply the colo
                                                            ur by contrast
   75 00000098 E1A03223        MOV              R3, R3, LSR #4 ; divide colour 
                                                            by 16
   76 0000009C E0833006        ADD              R3, R3, R6  ; add the brightnes
                                                            s to the colour
   77 000000A0 E35300FF        CMP              R3, #0x000000FF ; 
   78 000000A4 DA000001        BLE              else1       ; if(color>255) 
   79 000000A8 E3A030FF        MOV              R3, #0x000000FF ; color = 255
   80 000000AC EA000002        B                else2
   81 000000B0         else1
   82 000000B0 E3530000        CMP              R3, #0
   83 000000B4 AA000000        BGE              else2       ; if(color<0)
   84 000000B8 E3A03000        MOV              R3, #0      ; color = 0
   85 000000BC         else2
   86 000000BC E0800003        ADD              R0, R0, R3  ; return pixel += c
                                                            olour
   87 000000C0 E2877001        ADD              R7, R7, #1  ; pixel counter++
   88 000000C4 E1A03002        MOV              R3, R2      ; red = blue
   89 000000C8 E1A02001        MOV              R2, R1      ; blue = green
   90 000000CC EAFFFFED        B                changeColoursLoop ; }



ARM Macro Assembler    Page 3 


   91 000000D0         endChangeColoursLoop
   92 000000D0 E8BD80E0        LDMFD            sp!, {R5-R7, PC}
   93 000000D4 EAFFFFFE 
                       stop    B                stop
   94 000000D8         
   95 000000D8         
   96 000000D8                 END
Command Line: --debug --xref --apcs=interwork --depend=.\adjust.d -o.\adjust.o 
-ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\Philips --
predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLOCK
_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1
" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\adjust.lst 
Adjust.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Adjust 00000000

Symbol: Adjust
   Definitions
      At line 1 in file Adjust.s
   Uses
      None
Comment: Adjust unused
changeColours 00000074

Symbol: changeColours
   Definitions
      At line 64 in file Adjust.s
   Uses
      At line 26 in file Adjust.s
Comment: changeColours used once
changeColoursLoop 00000088

Symbol: changeColoursLoop
   Definitions
      At line 70 in file Adjust.s
   Uses
      At line 90 in file Adjust.s
Comment: changeColoursLoop used once
else1 000000B0

Symbol: else1
   Definitions
      At line 81 in file Adjust.s
   Uses
      At line 78 in file Adjust.s
Comment: else1 used once
else2 000000BC

Symbol: else2
   Definitions
      At line 85 in file Adjust.s
   Uses
      At line 80 in file Adjust.s
      At line 83 in file Adjust.s

endChangeColoursLoop 000000D0

Symbol: endChangeColoursLoop
   Definitions
      At line 91 in file Adjust.s
   Uses
      At line 72 in file Adjust.s
Comment: endChangeColoursLoop used once
endLoop 0000004C

Symbol: endLoop
   Definitions
      At line 31 in file Adjust.s
   Uses
      At line 22 in file Adjust.s
Comment: endLoop used once
getColours 00000054




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: getColours
   Definitions
      At line 44 in file Adjust.s
   Uses
      At line 25 in file Adjust.s
Comment: getColours used once
loop 00000024

Symbol: loop
   Definitions
      At line 20 in file Adjust.s
   Uses
      At line 30 in file Adjust.s
Comment: loop used once
start 00000000

Symbol: start
   Definitions
      At line 9 in file Adjust.s
   Uses
      At line 7 in file Adjust.s
Comment: start used once
stop 000000D4

Symbol: stop
   Definitions
      At line 93 in file Adjust.s
   Uses
      At line 34 in file Adjust.s
      At line 93 in file Adjust.s

11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file Adjust.s
   Uses
      At line 11 in file Adjust.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file Adjust.s
   Uses
      At line 13 in file Adjust.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file Adjust.s
   Uses
      At line 15 in file Adjust.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file Adjust.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file Adjust.s
   Uses
      At line 33 in file Adjust.s
Comment: putPic used once
5 symbols
353 symbols in table
