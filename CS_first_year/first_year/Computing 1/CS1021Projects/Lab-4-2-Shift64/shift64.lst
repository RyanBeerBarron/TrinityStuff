


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Shift64, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E59F0068        LDR              R0, =0x13131313 ; least signifi
                                                            cant 32-bit = 0x131
                                                            31313
    7 00000004 E59F1064        LDR              R1, =0x13131313 ; most signific
                                                            ant 32-bit = 0x1313
                                                            1313
    8 00000008 E59F2064        LDR              R2, =-2     ; shift count = -2
    9 0000000C E3A03102        LDR              R3, =0x80000000 ; mask to check
                                                             if most significan
                                                            t bit is equal to 1
                                                            
   10 00000010 E3A04001        LDR              R4, =1      ; mask to check if 
                                                            least significant b
                                                            it is equal to 1
   11 00000014 E3520000        CMP              R2, #0      ; if ( shift count 
                                                            > 0 )
   12 00000018 DA000009        BLE              while2      ; {
   13 0000001C         while1                               ;  while ( shift co
                                                            unt != 0 )
   14 0000001C E3520000        CMP              R2, #0      ;  {
   15 00000020 0A000011        BEQ              endwhile    ;  
   16 00000024 E0005003        AND              R5, R0, R3  ;   leading 1 in R0
                                                             = AND(R0, mask R3)
                                                            
   17 00000028 E1A01081        MOV              R1, R1, LSL #1 ;   shift R1 lef
                                                            t one time
   18 0000002C E3550102        CMP              R5, #0x80000000 ;   if (leading
                                                             1 in R0)
   19 00000030 1A000000        BNE              else1       ;   {
   20 00000034 E2811001        ADD              R1, R1, #1  ;    R1 += 1
   21 00000038         else1                                ;   }
   22 00000038 E1A00080        MOV              R0, R0, LSL #1 ;   shift R0 lef
                                                            t one time
   23 0000003C E2422001        SUB              R2, R2, #1  ;   R2 = R2 - 1
   24 00000040 EAFFFFF5        B                while1      ;  }
   25 00000044         while2                               ; } else
   26 00000044 E3520000        CMP              R2, #0      ; {  while ( shift 
                                                            count != 0)
   27 00000048 0A000007        BEQ              endwhile    ;  {
   28 0000004C E0016004        AND              R6, R1, R4  ;   least significa
                                                            nt bit in R1 = AND(
                                                            R1, mask R4)
   29 00000050 E1A000A0        MOV              R0, R0, LSR #1 ;   shift R0 rig
                                                            ht one time
   30 00000054 E3560001        CMP              R6, #1      ;   if ( least sign
                                                            ificant bit in R1 =
                                                            = 1 )
   31 00000058 1A000000        BNE              else2       ;   {  
   32 0000005C E2800102        ADD              R0, R0, #0x80000000 ;    R0 += 
                                                            0x80000000 (leading
                                                             one)
   33 00000060         else2                                ;   }
   34 00000060 E1A010A1        MOV              R1, R1, LSR #1 ;   shift R1 rig
                                                            ht one time



ARM Macro Assembler    Page 2 


   35 00000064 E2822001        ADD              R2, R2, #1  ;   R2 += 1
   36 00000068 EAFFFFF5        B                while2      ;  }
   37 0000006C         endwhile                             ; }
   38 0000006C EAFFFFFE 
                       stop    B                stop
   39 00000070         
   40 00000070         
   41 00000070                 END
              13131313 
              FFFFFFFE 
Command Line: --debug --xref --apcs=interwork --depend=.\shift64.d -o.\shift64.
o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips 
--predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLO
CK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA
 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\shift64.l
st Shift64.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Shift64 00000000

Symbol: Shift64
   Definitions
      At line 1 in file Shift64.s
   Uses
      None
Comment: Shift64 unused
else1 00000038

Symbol: else1
   Definitions
      At line 21 in file Shift64.s
   Uses
      At line 19 in file Shift64.s
Comment: else1 used once
else2 00000060

Symbol: else2
   Definitions
      At line 33 in file Shift64.s
   Uses
      At line 31 in file Shift64.s
Comment: else2 used once
endwhile 0000006C

Symbol: endwhile
   Definitions
      At line 37 in file Shift64.s
   Uses
      At line 15 in file Shift64.s
      At line 27 in file Shift64.s

start 00000000

Symbol: start
   Definitions
      At line 5 in file Shift64.s
   Uses
      At line 3 in file Shift64.s
Comment: start used once
stop 0000006C

Symbol: stop
   Definitions
      At line 38 in file Shift64.s
   Uses
      At line 38 in file Shift64.s
Comment: stop used once
while1 0000001C

Symbol: while1
   Definitions
      At line 13 in file Shift64.s
   Uses
      At line 24 in file Shift64.s
Comment: while1 used once
while2 00000044




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: while2
   Definitions
      At line 25 in file Shift64.s
   Uses
      At line 12 in file Shift64.s
      At line 36 in file Shift64.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Shift64.s
   Uses
      None
Comment: main unused
1 symbol
348 symbols in table
