package euler;

public class Euler13
{

	public static void main(String[] args)
	{
		String s ="37107287533902102798797998220837590246510135740250"
				+ "46376937677490009712648124896970078050417018260538"
				+ "74324986199524741059474233309513058123726617309629"
				+ "91942213363574161572522430563301811072406154908250"
				+ "23067588207539346171171980310421047513778063246676"
				+ "89261670696623633820136378418383684178734361726757"
				+ "28112879812849979408065481931592621691275889832738"
				+ "44274228917432520321923589422876796487670272189318"
				+ "47451445736001306439091167216856844588711603153276"
				+ "70386486105843025439939619828917593665686757934951"
				+ "62176457141856560629502157223196586755079324193331"
				+ "64906352462741904929101432445813822663347944758178"
				+ "92575867718337217661963751590579239728245598838407"
				+ "58203565325359399008402633568948830189458628227828"
				+ "80181199384826282014278194139940567587151170094390"
				+ "35398664372827112653829987240784473053190104293586"
				+ "86515506006295864861532075273371959191420517255829"
				+ "71693888707715466499115593487603532921714970056938"
				+ "54370070576826684624621495650076471787294438377604"
				+ "53282654108756828443191190634694037855217779295145"
				+ "36123272525000296071075082563815656710885258350721"
				+ "45876576172410976447339110607218265236877223636045"
				+ "17423706905851860660448207621209813287860733969412"
				+ "81142660418086830619328460811191061556940512689692"
				+ "51934325451728388641918047049293215058642563049483"
				+ "62467221648435076201727918039944693004732956340691"
				+ "15732444386908125794514089057706229429197107928209"
				+ "55037687525678773091862540744969844508330393682126"
				+ "18336384825330154686196124348767681297534375946515"
				+ "80386287592878490201521685554828717201219257766954"
				+ "78182833757993103614740356856449095527097864797581"
				+ "16726320100436897842553539920931837441497806860984"
				+ "48403098129077791799088218795327364475675590848030"
				+ "87086987551392711854517078544161852424320693150332"
				+ "59959406895756536782107074926966537676326235447210"
				+ "69793950679652694742597709739166693763042633987085"
				+ "41052684708299085211399427365734116182760315001271"
				+ "65378607361501080857009149939512557028198746004375"
				+ "35829035317434717326932123578154982629742552737307"
				+ "94953759765105305946966067683156574377167401875275"
				+ "88902802571733229619176668713819931811048770190271"
				+ "25267680276078003013678680992525463401061632866526"
				+ "36270218540497705585629946580636237993140746255962"
				+ "24074486908231174977792365466257246923322810917141"
				+ "91430288197103288597806669760892938638285025333403"
				+ "34413065578016127815921815005561868836468420090470"
				+ "230530811728164304876237919698424872550366387845831148769693215490281042402013833512446218144177347063783299490636259666498587618221225225512486764533677201869716985443124195724099139590089523100588229554825530026352078153229679624948164195386821877476085327132285723110424803456124867697064507995236377742425354112916842768655389262050249103265729672370191327572567528565324825826546309220705859652229798860272258331913126375147341994889534765745501184957014548792889848568277260777137214037988797153829820378303147352772158034814451349137322665138134829543829199918180278916522431027392251122869539409579530664052326325380441000596549391598795936352974615218550237130764225512118369380358038858490341698116222072977186158236678424689157993532961922624679571944012690438771072750481023908955235974572318970677254791506150550495392297953090112996751986188088225875314529584099251203829009407770775672113067397083047244838165338735023408456470580773088295917476714036319800818712901187549131054712658197623331044818386269515456334926366572897563400500428462801835170705278318394258821455212272512503275512160354698120058176216521282765275169129689778932238195734329339946437501907836945765883352399886755061649651847751807381688378610915273579297013376217784275219262340194239963916804498399317331273132924185707147349566916674687634660915035914677504995186714302352196288948901024233251169136196266227326746080059154747183079839286853520694694454072476841822524674417161514036427982273348055556214818971426179103425986472045168939894221798260880768528778364618279934631376775430780936333301898264209010848802521674670883215120185883543223812876952786713296124747824645386369930090493103636197638780396218407357239979422340623539380833965132740801111666627891981488087797941876876144230030984490851411606618262936828367647447792391803351109890697907148578694408955299065364044742557608365997664579509666024396409905389607120198219976047599490197230297649139826800329731560371200413779037855660850892521673093931987275027546890690370753941304265231501194809377245048795150954100921645863754710598436791786391670211874924319957006419179697775990283006991536871371193661495281130587638027841075444973307840789923115535562561142322423255033685442488917353448899115014406480203690680639606723221932041495354150312888033953605329934036800697771065056663195481234880673210146739058568557934581403627822703280826165707739483275922328459417065250945123252306082291880205877731971983945018088807242966198081119777158542502016545090413245809786882778948721859617721078384350691861554356628840622574736922845095162084960398013400172393067166682355524525280460972253503534226472524250874054075591789781264330331690";
		int[][] array = convertStringIn2DArrayOfDigits(50, 100, s);
		int[] answer = new int[60];
		int retenueDix=0;
		int retenueCent = 0;
		int retenueCentBis = 0;
		int sum = 0;
		int index = 59;
		for(int i =49; i>=0; i--)
		{
			sum = 0;
			if(i%2==0)
				sum += retenueDix+retenueCent;
			else if(i%2==1)
				sum += retenueDix+retenueCentBis;
			retenueDix = 0;
			if(i%2==0)
				retenueCent = 0;
			else if(i%2==1)	
				retenueCentBis = 0;
			for ( int j = 0; j<100; j++)
			{
				sum += array[j][i];
			}
			if(sum>=100 && i%2==0){
				retenueCent = sum/100;
				retenueDix = (sum%100)/10;}
			else if(sum>=100 && i%2==1){
				retenueCentBis = sum/100;
				retenueDix = (sum%100)/10;}
			else if(sum>=10)
				retenueDix = sum/10;	
			answer[index] = sum%10;
			index--;
		}
		answer[index--]=retenueDix + retenueCentBis;
		answer[index] = retenueCent;
		boolean leadingZero = true;
		int count = 10;
		for(int i = 0; i<answer.length && count>0; i++)
		{
			if(answer[i]!=0 || !leadingZero){
				count--;
				leadingZero = false;
				System.out.print(answer[i]);
				}}
	
	}
	public static int[][] convertStringIn2DArrayOfDigits(int x, int y, String s)
	{
		int[][] array = new int[y][x];
		for(int i=0; i<x*y; i++)
		{
			array[i/50][i%50] = s.charAt(i)-'0';
		}
		return array;
	}
}
